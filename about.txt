https://www.youtube.com/watch?v=pUNSHPyVryU&t=131s

1. In order to have backend running, created app/api/test/route.tsx
2. In order to consume that backend function, in the FE component:
    const repos = await fetch("http://localhost:3000/api/test")
3. The application was behaving weird, it turns out I discovered it was code in memory/cache.
To solve that, I simply removed /.next
* the cached code did not performed on Postman (it was working as expected). 
  But in Chrome and Firefox, it was running the cached code.

4. Route is been done by creating /app/test/page.tsx
When browsing, type 'application-address'/test

??? how to access the api internally withouth knowing its name/port???
? maybe there is something to do with /.next/types some file whithin this structure ?
  some version of Next.js accepts a handler method which checks req.method to forward for the right one,
  but in the current one it is needed to have the method to be exported as GET, POST, and so on.

- It is possible to, instead of having an API to be used internally, it can be a regular JS function
 which is exported and imported as usual. That function will call the external API.

- Another way, at Brad's video on https://www.youtube.com/watch?v=mTz0GXj8NN0, he creates a function to check 
whether it is production or development environment and set the path (http://localhost:3000 or https://yourdomain...) from there.
This way is more statisc and would be hard to deal in a AWS env, for instance.


